import requests
import pandas as pd
import sqlalchemy as db
import random
import openai

openai.api_key = 'sk-proj-5lcvtPRMFBJWnbVcD9yCT3BlbkFJVskNGUYwrmjVnpJm4hDi'

def check_response(response):
        # Check the status of the request
    if response.status_code == 200:
        # Good
        return
    else:
        # Print an error message if the request was unsuccessful
        print(f"Error: {response.status_code}")
        print(response.text)
        raise Exception()

def pick_category():
    list_of_categories = ['business','crime','domestic','education','entertainment','environment','food','health','lifestyle','other','politics','science','sports','technology','top','tourism','world']
    for cat in list_of_categories: 
        print(cat)
    category = input('\nPick a category from this list of categories: ')
    if category not in list_of_categories:
        print(f"The category '{category}' is not listed. Try Again")
        return pick_category()
    else:
        print(f"\nYou chose the category '{category}'")
        return category

def get_news(category):
    # Replace 'YOUR_API_KEY' with your actual API key from NewsData.io
    API_KEY = 'pub_4732238994f3ac13b52e07481e490b40f357d'
    BASE_URL = 'https://newsdata.io/api/1/news'

    # Set up the parameters for the request
    params = {
        'apikey': API_KEY, #API KEY
        'language': 'en',   # Language preference
        'category': category,  # Category preference
    }

    # Make the GET request to the API
    response = requests.get(BASE_URL, params=params)

    #Cechking response
    check_response(response)

    #Getting news
    data = response.json()
    data_len = len(data['results'])
    index = random.randint(0, data_len-1)
    news = data['results'][index]['description']
    print(f"\nThe news pertaining to the category '{category}' is:")
    print(news)
    return news

# Function to prompt the user to pick a celebrity
def pick_celebrity():
    celeb = input('\nEnter Celebrity You Want to Hear From Regarding This News: ')
    return celeb

# Function to get a response from the GPT model based on the news and celebrity
def get_response(category, news, celeb):
    prompt = f"Given the category, {category}, and the news about the category, {news}, reply to this news as if you are {celeb}, make sure to outline their personality in your response, and make sure the response does not reflect that it was generated by a robot."
    
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "You are a master of celebrities and are an assistant that will always mimic the actors conversation and speech patterns. Make sure you are updated on famous actors, politicians, artists, musicians, athletes, and more."},
            {"role": "user", "content": prompt}
        ],
        max_tokens=150
    )
    
    #Checking response
    check_response(response)
    reply = response.choices[0].message['content'].strip()
    print(f"\n{celeb} says:\n\n{reply}\n")
    
    return reply

def main():
    category = pick_category()
    news = get_news(category)
    celeb = pick_celebrity()
    while True:
        reply = get_response(category, news, celeb)
        again = input("Type 'again' to hear from another celebrity or 'continue' to keep the conversation going with the same celebrity: ")
        if again.lower() == 'again':
            celeb = pick_celebrity()
        elif again.lower() == 'continue':
            user_input = input(f"{celeb} is waiting for your response: ")
            news = user_input  # Treat the user's input as the new "news" to continue the conversation.
        else:
            print("\nThanks for playing!\n")
            break

if __name__ == "__main__":
    main()