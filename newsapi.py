import os
import requests
import pandas as pd
import sqlalchemy as db
import random
import openai
from dotenv import load_dotenv
from sqlalchemy import inspect

# Load environment variables from .env file
load_dotenv()

# Retrieve API keys from environment variables
openai.api_key = os.getenv('OPENAI_API_KEY')
NEWS_API_KEY = os.getenv('NEWS_API_KEY')

# Function to check response status
def check_response(response):
    if response.status_code == 200:
        return
    else:
        print(f"Error: {response.status_code}")
        print(response.text)
        raise Exception()

# Function to initialize the database and table if not already initialized
def initialize_db():
    engine = db.create_engine('sqlite:///news.db')
    connection = engine.connect()
    metadata = db.MetaData()
    news_table = db.Table('news', metadata,
                          db.Column('id', db.Integer, primary_key=True),
                          db.Column('category', db.String),
                          db.Column('description', db.String))
    # Check if table already exists
    inspector = inspect(engine)
    if not inspector.has_table('news'):
        metadata.create_all(engine)
    return engine, connection, news_table

# Function to populate the database with news
def populate_db(connection, news_table, category, news):
    query = db.insert(news_table).values(category=category, description=news)
    connection.execute(query)

# Function to retrieve news from the database
def get_news_from_db(connection, news_table, category):
    query = db.select([news_table]).where(news_table.columns.category == category)
    result = connection.execute(query).fetchall()
    return random.choice(result)['description'] if result else None

# Function to prompt the user to pick a category
def pick_category():
    list_of_categories = ['business', 'crime', 'education', 'entertainment', 'health', 'science', 'sports', 'technology', 'world']
    for cat in list_of_categories: 
        print(cat)
    category = input('\nPick a category from this list of categories: ')
    if category not in list_of_categories:
        print(f"The category '{category}' is not listed. Try Again")
        return pick_category()
    else:
        print(f"\nYou chose the category '{category}'")
        return category

# Function to get news from the News API
def get_news(category):
    BASE_URL = 'https://newsdata.io/api/1/news'
    params = {'apikey': NEWS_API_KEY, 'language': 'en', 'category': category}
    response = requests.get(BASE_URL, params=params)
    check_response(response)
    data = response.json()
    data_len = len(data['results'])
    index = random.randint(0, data_len - 1)
    news = data['results'][index]['description']
    print(f"\nThe news pertaining to the category '{category}' is:\n{news}")
    return news

# Function to prompt the user to pick a celebrity
def pick_celebrity():
    celeb = input('\nEnter Celebrity You Want to Hear From Regarding This News: ')
    return celeb

# Function to get a response from the GPT model based on the news and celebrity
def get_response(category, news, celeb):
    prompt = f"Given the category, {category}, and the news about the category, {news}, reply to this news as if you are {celeb}, make sure to outline their personality in your response, and make sure the response does not reflect that it was generated by a robot."
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "You are a master of celebrities and are an assistant that will always mimic the actors' conversation and speech patterns. Make sure you are updated on famous actors, politicians, artists, musicians, athletes, and more."},
            {"role": "user", "content": prompt}
        ],
        max_tokens=150
    )
    reply = response.choices[0].message['content'].strip()
    print(f"\n{celeb} says:\n\n{reply}\n")
    return reply

# Main function to run the script
def main():
    engine, connection, news_table = initialize_db()
    category = pick_category()
    news = get_news(category)
    if not get_news_from_db(connection, news_table, category):  # Populate DB if no news exists for the category
        populate_db(connection, news_table, category, news)
    celeb = pick_celebrity()
    while True:
        reply = get_response(category, news, celeb)
        again = input("Type 'again' to hear from another celebrity or 'continue' to keep the conversation going with the same celebrity: ")
        if again.lower() == 'again':
            celeb = pick_celebrity()
        elif again.lower() == 'continue':
            user_input = input(f"{celeb} is waiting for your response: ")
            news = user_input  # Treat the user's input as the new "news" to continue the conversation.
        else:
            print("\nThanks for playing!\n")
            break

if __name__ == "__main__":
    main()
