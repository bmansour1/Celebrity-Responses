import os
import requests
import random
import sqlite3
import openai
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Retrieve API keys from environment variables
openai.api_key = os.getenv('OPENAI_API_KEY')
NEWS_API_KEY = os.getenv('NEWS_API_KEY')

# Function to check response status
def check_response(response):
    if response.status_code == 200:
        return
    else:
        print(f"Error: {response.status_code}")
        print(response.text)
        raise Exception()

# Function to initialize the database and table if not already initialized
def initialize_db():
    connection = sqlite3.connect('news.db')
    cursor = connection.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS news (
            id INTEGER PRIMARY KEY,
            category TEXT,
            description TEXT
        )
    ''')
    connection.commit()
    return connection, cursor

# Function to populate the database with news
def populate_db(connection, cursor, category, news):
    cursor.execute('INSERT INTO news (category, description) VALUES (?, ?)', (category, news))
    connection.commit()

# Function to retrieve news from the database
def get_news_from_db(cursor, category):
    cursor.execute('SELECT description FROM news WHERE category = ?', (category,))
    result = cursor.fetchall()
    return result

# Function to fetch news from the News API
def fetch_news_from_api(category):
    BASE_URL = 'https://newsdata.io/api/1/news'
    params = {'apikey': NEWS_API_KEY, 'language': 'en', 'category': category}
    response = requests.get(BASE_URL, params=params)
    check_response(response)
    data = response.json()
    return [article['description'] for article in data['results']]

# Function to prompt the user to pick a category
def pick_category():
    list_of_categories = ['business', 'crime', 'education', 'entertainment', 'health', 'science', 'sports', 'technology', 'world']
    for cat in list_of_categories: 
        print(cat)
    category = input('\nPick a category from this list of categories: ')
    if category not in list_of_categories:
        print(f"The category '{category}' is not listed. Try Again")
        return pick_category()
    else:
        print(f"\nYou chose the category '{category}'")
        return category

# Function to prompt the user to pick a celebrity
def pick_celebrity():
    celeb = input('\nEnter Celebrity You Want to Hear From Regarding This News: ')
    return celeb

# Function to get a response from the GPT model based on the news and celebrity
def get_response(category, news, celeb):
    prompt = f"Given the category, {category}, and the news about the category, {news}, reply to this news as if you are {celeb}. Make sure to outline their personality in your response, and ensure the response does not reflect that it was generated by a robot. if it is not a famous artist and is random words then say you dont knwo the celebnrity they chose and to chose another"
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "You are a master of celebrities and are an assistant that will always mimic the celebrities' conversation and speech patterns. Make sure you are updated on famous actors, politicians, artists, musicians, athletes, and more."},
            {"role": "user", "content": prompt}
        ],
        max_tokens=150
    )
    reply = response.choices[0].message['content'].strip()
    print(f"\n{celeb} says:\n\n{reply}\n")
    return reply

# Main function to run the script
def main():
    connection, cursor = initialize_db()
    category = pick_category()
    if category == 'sports':
        news_list = get_news_from_db(cursor, category)
        # Fetch more news if there are less than 5 articles in the database
        if len(news_list) < 5:
            print("Fetching more news from the API...")
            fetched_news = fetch_news_from_api(category)
            for news in fetched_news:
                populate_db(connection, cursor, category, news)
            # Re-fetch news from the database after populating
            news_list = get_news_from_db(cursor, category)
    else:
        news_list = get_news_from_db(cursor, category)
        if not news_list:  # Populate DB if no news exists for the category
            fetched_news = fetch_news_from_api(category)
            for news in fetched_news:
                populate_db(connection, cursor, category, news)
            # Re-fetch news from the database after populating
            news_list = get_news_from_db(cursor, category)

    news = random.choice(news_list)[0] if news_list else None
    print(f"\nThe news pertaining to the category '{category}' is:\n{news}")
    celeb = pick_celebrity()
    while True:
        reply = get_response(category, news, celeb)
        again = input("Type 'again' to hear from another celebrity or 'continue' to keep the conversation going with the same celebrity: ")
        if again.lower() == 'again':
            celeb = pick_celebrity()
        elif again.lower() == 'continue':
            user_input = input(f"{celeb} is waiting for your response: ")
            news = user_input  # Treat the user's input as the new "news" to continue the conversation.
        else:
            print("\nThanks for playing!\n")
            break
    cursor.close()
    connection.close()

if __name__ == "__main__":
    main()
